{"remainingRequest":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/RFID/README.md?vue&type=template&id=69e98f8d&","dependencies":[{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/RFID/README.md","mtime":1601576680595},{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/cache-loader/dist/cjs.js","mtime":1601466867434},{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1601466868244},{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/cache-loader/dist/cjs.js","mtime":1601466867434},{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/vue-loader/lib/index.js","mtime":1601466868244},{"path":"/Users/arilybaert/Documents/gdm/schijf_5/WoT/GitHub/research-arilybaert/node_modules/@vuepress/markdown-loader/index.js","mtime":1601466867384}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}